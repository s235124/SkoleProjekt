import { useState, useEffect } from 'react';
useful
const hours = [
  "00:00:00", "01:00:00", "02:00:00", "03:00:00", "04:00:00", "05:00:00",
  "06:00:00", "07:00:00", "08:00:00", "09:00:00", "10:00:00", "11:00:00",
  "12:00:00", "13:00:00", "14:00:00", "15:00:00", "16:00:00", "17:00:00",
  "18:00:00", "19:00:00", "20:00:00", "21:00:00", "22:00:00", "23:00:00"
];

function timeToMinutes(timeStr) {
  const [h, m] = timeStr.split(':').map(Number);
  return h * 60 + m;
}

function minutesToTime(minutes) {
  const h = Math.floor(minutes / 60);
  const m = minutes % 60;
  return `${String(h).padStart(2, '0')}:${String(m).padStart(2, '0')}:00`;
}

function mergeIntervals(intervals) {
  if (intervals.length === 0) return [];
  intervals.sort((a, b) => a.start - b.start);
  const merged = [intervals[0]];
  for (let i = 1; i < intervals.length; i++) {
    const last = merged[merged.length - 1];
    if (intervals[i].start <= last.end) {
      last.end = Math.max(last.end, intervals[i].end);
    } else {
      merged.push(intervals[i]);
    }
  }
  return merged;
}

function computeFreeIntervals(merged) {
  const free = [];
  let prevEnd = 0;
  for (const interval of merged) {
    if (interval.start > prevEnd) {
      free.push({ start: prevEnd, end: interval.start });
    }
    prevEnd = Math.max(prevEnd, interval.end);
  }
  if (prevEnd < 1440) {
    free.push({ start: prevEnd, end: 1440 });
  }
  return free;
}

export default function ModuleCreator() {
  const [date, setDate] = useState('');
  const [existingIntervals, setExistingIntervals] = useState([]);
  const [freeIntervals, setFreeIntervals] = useState([]);
  const [startTime, setStartTime] = useState('');
  const [endTime, setEndTime] = useState('');

  useEffect(() => {
    if (date) {
      fetch(`/timeslots?date=${date}`)
        .then(res => res.json())
        .then(data => {
          const intervals = data.map(({ start, end }) => ({
            start: timeToMinutes(start),
            end: timeToMinutes(end)
          }));
          const merged = mergeIntervals(intervals);
          const free = computeFreeIntervals(merged);
          setExistingIntervals(merged);
          setFreeIntervals(free);
        });
    }
  }, [date]);

  const availableStartTimes = hours.filter(hour => {
    const h = timeToMinutes(hour);
    return freeIntervals.some(free => h >= free.start && h < free.end);
  });

  const availableEndTimes = startTime ? hours.filter(hour => {
    const hStart = timeToMinutes(startTime);
    const hEnd = timeToMinutes(hour);
    const free = freeIntervals.find(f => hStart >= f.start && hStart < f.end);
    return free && hEnd > hStart && hEnd <= free.end;
  }) : [];

  return (
    <div>
      <input type="date" value={date} onChange={(e) => setDate(e.target.value)} />
      
      <select 
        value={startTime} 
        onChange={(e) => setStartTime(e.target.value)}
        disabled={!date}
      >
        <option value="">Select Start Time</option>
        {availableStartTimes.map(hour => (
          <option key={hour} value={hour}>{hour.slice(0, 5)}</option>
        ))}
      </select>

      <select 
        value={endTime} 
        onChange={(e) => setEndTime(e.target.value)}
        disabled={!startTime}
      >
        <option value="">Select End Time</option>
        {availableEndTimes.map(hour => (
          <option key={hour} value={hour}>{hour.slice(0, 5)}</option>
        ))}
      </select>
    </div>
  );
}

thought
 The user has a Next.js app with a MySQL backend for a learning management system. They want to prevent teachers from creating modules that overlap with existing timeslots. The backend has an endpoint '/timeslots' that returns start and end times for a given date. The frontend has dropdowns for start and end times using the 'hours' array. The goal is to filter these dropdowns so that teachers can't pick times that overlap with existing modules.

First, the current '/timeslots' endpoint might not be efficient. It runs two separate queries for start and end times. Maybe combining them into a single query would be better. Instead of making two separate SELECT statements, they can get both start and end times in one query. That would reduce the number of database calls and simplify the code.

So, changing the SQL query to SELECT module_start_time, module_end_time FROM modules WHERE module_date = ?. That way, they get all the start and end times in one go. This would also avoid the nested callbacks, which can get messy and harder to maintain.

Next, processing the times. The current code pushes startTimes and endTimes into a nested array. But when they send this to the frontend, it's structured as an array containing two arrays. However, for the frontend to check for overlapping intervals, it's better to have an array of objects or pairs of start and end times for each module. That way, each module's time slot is paired together. So instead of having separate start and end arrays, the backend should return an array where each element is an object with start and end times. For example, times.push({ start: startTime[i].module_start_time, end: endTime[i].module_end_time }) but wait, if they combine the query, they can loop through each result and collect all the intervals properly.

Wait, if they do a single query that gets both start and end times, then the result will have each row as a module's start and end time. So processing that would be more straightforward. Let me adjust the code accordingly.

In the backend, after combining the query, the code can map the results into an array of time slots. For example:

db.query('SELECT module_start_time, module_end_time FROM modules WHERE module_date = ?', [date], (err, results) => {

if (err) {

// handle error

}

const times = results.map(row => ({

start: row.module_start_time,

end: row.module_end_time

}));

res.json(times);

});

This way, the frontend receives an array of objects, each with start and end times. That's more usable than the current structure which is an array containing two separate arrays of starts and ends.

Then, on the frontend, the hours array is used to populate the dropdowns. The idea is to filter the available hours in the dropdowns such that a teacher can't select a time that overlaps with existing modules.

To do this, when the user selects a date, the frontend should fetch the existing time slots for that date. Then, for each hour in the 'hours' array, check if selecting that hour as a start or end time would overlap with any existing time slot.

But how exactly to filter the dropdowns? Let's think about the start and end time selection. When a teacher picks a start time, the end time should be after the start time. Additionally, the selected interval [start, end] shouldn't overlap with any existing intervals.

But the problem is that the existing times are in the database, so when creating a new module, we need to ensure that the new start and end times don't overlap with any existing ones.

First, the frontend needs to have all the existing time slots for the selected date. Then, when the user tries to select a start or end time, the available options should be filtered based on the existing slots.

But the dropdowns are for start and end times. Let's consider that a module has a start time and an end time. To prevent overlap, the new module's time must not overlap with any existing module's time. Overlap can occur if the new start time is between an existing module's start and end time, or the new end time is between an existing module's start and end time, or the new interval entirely contains an existing interval.

So the filtering needs to check all existing intervals and disable any times in the dropdown that would result in an overlap.

However, the dropdowns are separate for start and end, so perhaps the approach is:

1. Fetch existing time slots for the selected date.

2. For each hour in the 'hours' array, determine if selecting that hour as a start or end time (depending on which dropdown) would lead to an overlap, considering the other selected time.

But this might be complex because the start and end are interdependent. For example, the end time must be after the start time, and the entire interval must not overlap.

Alternatively, when the user selects a start time, the available end times are those after the start time and not part of any existing interval. Similarly, the start time dropdown should only show times that are not within any existing interval and allow selecting a start time that, when paired with an end time, doesn't overlap.

But this might require a more dynamic approach. For example, when the user selects a start time, the end time options are filtered to times after the start time and not overlapping with existing intervals.

But how to compute the available times?

Perhaps the steps are:

- Get existing time slots for the date.

- For the start time dropdown, disable any time that is within an existing interval.

- For the end time dropdown, once a start time is selected, disable any time that is before the start time or within an existing interval, and ensure that the end time is after the start time.

But even this may not cover all cases. For example, if the new interval starts before an existing interval but ends during it, that's an overlap. Or starts during an existing interval and ends after.

So perhaps the correct approach is:

1. Collect all existing time intervals for the date.

2. When generating the start time dropdown options, each hour is allowed only if there exists at least one possible end time (after it) such that the interval [start, end] does not overlap with any existing intervals.

3. Once a start time is selected, filter the end time options to those that are after the start time and such that the interval [start, end] does not overlap with any existing intervals.

This way, the start time dropdown only shows times where it's possible to select an end time without overlapping. Then, once a start time is chosen, the end time is filtered to valid options.

But how to implement this?

First, on the frontend, after fetching the existing intervals, process them into an array of time ranges. Then, for each hour in 'hours', check if it can be a valid start time.

To check validity for start time:

A start time is valid if there exists at least one end time (later than start) such that the interval [start, end] does not overlap with any existing intervals.

But this might be computationally intensive, as for each start time, you have to check all possible end times. Alternatively, for each start time, find the earliest possible end time that doesn't conflict.

Alternatively, find all available time slots that are not covered by existing intervals. For example, the free time between existing intervals.

But perhaps a better approach is to merge the existing intervals into a list of non-overlapping intervals and then find the available slots.

For example, existing intervals might be [09:00-10:00], [11:00-12:00]. Then the available slots are before 09:00, between 10:00-11:00, and after 12:00. So the start times can be any time in those available slots, and end times would be in the same available slot, after the start time.

But how to compute this?

First, sort the existing intervals by start time. Then, merge overlapping intervals if any. Then, compute the free time between them.

Once the free time slots are known, the start time can only be in the free slots, and the end time must be within the same free slot and after the start time.

This seems manageable.

So steps:

1. On the frontend, fetch existing intervals for the date.

2. Sort them by start time.

3. Merge overlapping or adjacent intervals.

4. Compute the free time slots (times not covered by any existing interval).

5. For the start time dropdown, only include hours that are within the free time slots.

6. Once a start time is selected, find which free slot it's in, and allow end times that are in the same slot and after the start time.

But how to handle the 'hours' array which is in hourly increments? Because the existing intervals might not align exactly to the hour.

Wait, the 'hours' array is ["00:00:00", "01:00:00", ..., "23:00:00"], which are strings representing times on the hour. But the existing modules might have start and end times that are not exactly on the hour. For example, a module could start at 09:30:00 and end at 10:30:00.

But according to the user's code, the database stores module_start_time and module_end_time as time fields. So it's possible that the existing intervals are not aligned to the hours in the 'hours' array.

However, the frontend dropdowns are using the 'hours' array, which suggests that the start and end times are selected in hourly increments. So perhaps the modules are created with start and end times on the hour. But if the database allows more granular times (like 09:30), then the existing code might have a problem because the frontend is restricting to hourly times.

But assuming that the modules are created with start and end times on the hour (as per the dropdowns), then the existing intervals in the database are also on the hour. But if that's not the case, then the filtering based on the 'hours' array might not work correctly.

For the sake of this problem, perhaps we can assume that modules are created with start and end times on the hour. So the existing intervals are in hourly increments. That way, the 'hours' array aligns with the database times.

So given that, the existing intervals are all on the hour, and the frontend allows selecting times from the 'hours' array.

Now, the task is to, given a list of existing intervals (each as start and end times on the hour), compute which hours are available for selection in the dropdowns.

First, merge overlapping intervals. For example, if there's an interval from 09:00 to 10:00 and another from 10:00 to 11:00, they can be merged into 09:00-11:00.

Once merged, the free time is the time outside these merged intervals.

For example, merged intervals are [09:00-11:00, 13:00-15:00]. The free time would be [00:00-09:00, 11:00-13:00, 15:00-24:00).

Then, the start time can be any hour in the free time, and the end time must be after the start time and within the same free interval.

So, for the start time dropdown, available options are the hours in the free intervals.

For the end time dropdown, once a start time is selected, the available end times are the hours in the same free interval that are after the start time.

But how to implement this in code?

First, on the frontend, after fetching the existing intervals for a date, process them as follows:

1. Convert the start and end times into Date objects or into minutes since midnight for easier comparison.

2. Sort the intervals by start time.

3. Merge overlapping or adjacent intervals.

4. Compute the free intervals.

5. For the start time dropdown, filter 'hours' to those that are within any free interval.

6. For the end time dropdown, once a start time is selected, filter to hours in the same free interval that are after the start time.

Let's break this down.

First, converting the time strings to minutes. For example, "09:00:00" becomes 540 minutes (9*60).

Then, sort the intervals by their start time.

Then, merge the intervals. For example:

function mergeIntervals(intervals) {

if (intervals.length <= 1) return intervals;

intervals.sort((a, b) => a.start - b.start);

const merged = [intervals[0]];

for (let i = 1; i < intervals.length; i++) {

const last = merged[merged.length - 1];

if (intervals[i].start <= last.end) {

// Overlapping or adjacent, merge them

last.end = Math.max(last.end, intervals[i].end);

} else {

merged.push(intervals[i]);

}

}

return merged;

}

Once merged, compute the free intervals. The free intervals are the gaps between the merged intervals, plus before the first and after the last.

For example:

merged = [[540, 660], [780, 900]] (which is 09:00-11:00 and 13:00-15:00)

freeIntervals = [

{ start: 0, end: 540 }, // 00:00-09:00

{ start: 660, end: 780 }, // 11:00-13:00

{ start: 900, end: 1440 } // 15:00-24:00

]

Then, for the start time dropdown, any hour that falls within a free interval is allowed.

For each hour in 'hours', convert to minutes and check if it is within any free interval.

For example, "08:00:00" is 480 minutes. Check if 480 is within any free interval. Since the first free interval is 0-540, yes, so it's allowed.

But wait, the start time must be such that there's at least one possible end time after it in the same free interval.

For example, if the free interval is from 0-540 (00:00 to 09:00), then the start time can be any hour from 00:00 to 08:00, because the end time needs to be after. So 08:00 can be a start time with end time 09:00, which is the end of the free interval.

Wait, but in the merged intervals example, the first free interval is from 0-540 (00:00 to 09:00). So the start time can be 00:00, 01:00, ..., 08:00 (since 09:00 is the end of the free interval). But 09:00 is the start of the first merged interval, so it's not allowed.

So for a free interval from start to end (exclusive?), the available start times are from start to end - 1 hour (since end is the start of the next merged interval).

Wait, perhaps the free intervals are [0, 540), [660, 780), [900, 1440). So the start time must be less than the end of the free interval.

But in terms of hours, each hour is a specific time. For example, "08:00:00" is 480 minutes. The free interval is 0-540, so 08:00 is allowed. The next hour is 09:00 (540), which is the start of a merged interval, so not allowed.

So to generate available start times, check each hour in 'hours' to see if it falls within any free interval, and also ensure that there's at least one hour after it in the same free interval for the end time.

Wait, for example, if the free interval is from 0 to 540 (exclusive), then the maximum start time is 480 (08:00:00), allowing an end time of 540 (09:00:00), but since 540 is the start of a merged interval, the end time must be within the free interval. So perhaps the end time must be before the end of the free interval.

Wait, in this case, the free interval is from 0 to 540 (09:00), but the merged interval starts at 540. So the end time for a module created in the free interval must be <= 540. So if the start time is 480 (08:00), the end time can be 540 (09:00), but that's the boundary. However, the existing merged interval starts at 540, so if the new module's end time is 540, does that overlap?

Assuming that the existing module starts at 540 (09:00), then a new module ending at 540 (09:00) would end exactly when the existing one starts. Depending on whether intervals are considered inclusive or exclusive. If the end time is exclusive, then 09:00 is allowed as an end time. But this depends on how the backend checks for overlaps.

But for the sake of the problem, perhaps we can assume that the intervals are non-overlapping if the new module's end time is the same as an existing module's start time.

Therefore, in the free interval [0, 540), the start time can be any hour up to 480 (08:00), allowing an end time at 540 (09:00) which is the end of the free interval.

But in this case, the end time is allowed to be exactly at the start of the next merged interval. So it's safe.

Therefore, for a given free interval, the start times are any hour in the free interval, and the end times are any hour after the start time and within the same free interval.

So the steps are:

For each hour in 'hours':

- Convert to minutes (e.g., "08:00:00" → 480)

- Check if there exists a free interval that contains this hour (start ≤ hour < end)

- Also, ensure that there is at least one hour after it in the same free interval (so that an end time can be selected)

For example, if the free interval is [0, 540) (0 ≤ hour < 540), then hour 480 (08:00) is allowed, but hour 540 (09:00) is not. For hour 480, the end time can be 540 (if allowed by the free interval's end), but since the end of the free interval is 540, which is exclusive, then 540 is not part of the free interval, so the latest end time would be 540 (but since the existing interval starts at 540, perhaps it's allowed as the end time).

But this requires precise handling.

Alternatively, perhaps the free interval's end is the start of the next merged interval. So the available end times for a start time in a free interval can be any hour after the start time up to the free interval's end.

So if the free interval is from 0 to 540, then end times can be from startTime + 1 hour up to 540.

Wait, but if the free interval is 0 to 540 (minutes), then converting to hours:

0 minutes is 00:00:00

540 minutes is 09:00:00

So if a start time is 480 (08:00:00), the possible end times are 540 (09:00:00) but that's the end of the free interval and the start of the merged interval. So is 540 allowed as an end time?

Assuming that the backend considers the end time as exclusive, then a module ending at 09:00:00 would not overlap with a module starting at 09:00:00. But if the backend considers it inclusive, then it would overlap.

This depends on how the overlap is checked. So when checking for overlap between a new module [newStart, newEnd] and existing [existingStart, existingEnd], the condition for no overlap is:

newEnd <= existingStart OR newStart >= existingEnd

Otherwise, they overlap.

So if the newEnd is equal to existingStart, then no overlap.

Therefore, allowing the end time to be exactly the start of an existing interval is safe.

So in the example, if a new module is from 08:00 to 09:00, and an existing module starts at 09:00, there's no overlap.

Therefore, in the free interval [0, 540), the end time can be up to 540.

So for start time 480 (08:00), the end time can be 540 (09:00), which is allowed.

Therefore, the start time dropdown should include any hour that is within a free interval and has at least one hour after it in the same free interval (including the end of the free interval).

So in code:

On the frontend:

1. Fetch existing intervals for the selected date.

2. Convert each interval's start and end times to minutes.

3. Sort and merge the intervals.

4. Compute free intervals.

5. For each hour in 'hours', check if it is within any free interval and that there's at least one hour after it in the same interval (i.e., the hour is less than the end of the free interval).

6. For the end time dropdown, once a start time is selected, find which free interval it's in, and allow hours after the start time up to the end of the free interval.

But how to implement this in code.

First, the merged intervals are sorted and merged.

Then, free intervals are computed.

Compute free intervals:

function computeFreeIntervals(mergedIntervals) {

const freeIntervals = [];

let previousEnd = 0;

for (const interval of mergedIntervals) {

if (interval.start > previousEnd) {

freeIntervals.push({

start: previousEnd,

end: interval.start

});

}

previousEnd = Math.max(previousEnd, interval.end);

}

// Add the free interval after the last merged interval

if (previousEnd < 1440) { // 1440 minutes = 24:00

freeIntervals.push({

start: previousEnd,

end: 1440

});

}

return freeIntervals;

}

Wait, the mergedIntervals are sorted. So the free intervals are before the first merged interval, between merged intervals, and after the last merged interval.

But in the code above, the first free interval is between 0 and the first merged interval's start. Then between merged intervals, and finally after the last merged interval.

But what if there are no merged intervals? Then all time is free.

So computeFreeIntervals would return a single free interval from 0 to 1440.

Once freeIntervals are computed, then for each hour in 'hours', check if it is within any free interval and that there is room for an end time after it.

For a given hour (in minutes), check if it is within any free interval's start (inclusive) and end (exclusive), and that the hour + 60 (1 hour) <= end of the free interval. Because the minimum duration is 1 hour.

Wait, but maybe modules can be longer than 1 hour. So the end time can be any time after the start time. So the teacher could select a start time of 08:00 and end time of 10:00, which is a 2-hour module. So the end time can be any hour after the start time.

Therefore, for the start time, as long as it is within a free interval, and the free interval's end is after the start time, then it's allowed. Because the end time can be any hour after, up to the end of the free interval.

But for the start time dropdown, even if the free interval has only one hour left, that hour can't be a start time because there's no end time after it. For example, if the free interval is from 540 to 600 (09:00 to 10:00), then the start time could be 09:00, but the end time must be 10:00. But if the free interval is up to 600 (exclusive), then the end time can be 600 (10:00), which is allowed. So the start time in this case is allowed.

Wait, if the free interval is from 540 (09:00) to 600 (10:00), then the start time can be 09:00, and the end time can be 10:00. But if the free interval's end is 600, then the start time must be < 600. So 540 (09:00) is allowed as start time, and end time can be 600 (10:00).

So in this case, the start time is allowed even though the free interval is exactly one hour long. Because the end time can be the next hour.

But wait, 540 to 600 is 60 minutes, which is one hour. So if start time is 540 (09:00), the end time can be 600 (10:00), which is allowed.

Therefore, for a free interval of [start, end), a start time is allowed if start <= hour < end, and there exists at least one hour after it (i.e., hour + 60 <= end).

Wait, because the end time must be after the start time. So if the free interval is from 540 to 600 (09:00 to 10:00), then start time can be 540 (09:00) with end time 600 (10:00). But if the free interval is from 540 to 600, then the start time can be 540, and end time can be 600. But 540 + 60 = 600, which is the end of the free interval. So it's allowed.

So the condition for a start time hour is: exists a free interval where hour is >= free.start and hour < free.end, and (hour + 60) <= free.end.

Because the module must be at least one hour long. So the end time is start time + 1 hour.

Wait, but the teacher might want to create a module that is longer than one hour. For example, start at 08:00 and end at 10:00 (2 hours). So the end time can be any hour after the start time, as long as the entire interval is within a free interval.

So the start time must be in a free interval, and the end time must be in the same free interval, with end > start.

Therefore, for a start time to be valid, there must be at least one possible end time (i.e., the free interval's end is after the start time).

So the condition is that the start time is in a free interval and that the free interval's end is > start time.

Therefore, even if the free interval is one hour long (start and end separated by 60 minutes), the start time is allowed because end time can be start + 60, which is within the free interval.

So in code, for each hour in 'hours', convert to minutes (h), check if there exists a free interval where h >= free.start and h < free.end, and h < free.end (so that there's room for at least one hour after).

Wait, h < free.end is already part of the condition. And since the end time must be > h, which is possible if free.end > h.

So the start time is valid if there's a free interval that contains h (h >= free.start and h < free.end) and free.end > h.

But since h is in the free interval, free.end > h is automatically true (because h < free.end). So the condition is simply that the hour is within any free interval.

Therefore, the start time dropdown should include any hour that is within any free interval.

Then, when the start time is selected, the end time dropdown must include hours that are:

- After the start time

- Within the same free interval as the start time

- Such that the entire interval [start, end] does not overlap with any existing intervals.

But since the free intervals are already the merged non-overlapping existing intervals, any interval [start, end] within a free interval will not overlap with existing intervals.

Therefore, once the start time is selected from a free interval, the end time can be any hour in the same free interval that is after the start time.

So for example, if the free interval is [0, 540), start time is 480 (08:00), then the end time can be 540 (09:00), 600 (10:00), etc., but wait, no, because the free interval's end is 540. So the end time must be <= 540.

But 540 is the end of the free interval. So the latest possible end time is 540.

So for the start time 480 (08:00), end time can be 540 (09:00), which is allowed.

Therefore, the end time options are all hours in the same free interval that are after the start time and <= free.end.

So to implement this:

When a start time is selected:

1. Convert the start time to minutes (hStart).

2. Find the free interval that contains hStart.

3. The end time options are all hours in 'hours' where hEnd > hStart and hEnd <= free.end.

But how to handle the conversion between hours in the 'hours' array and their minute values.

First, precompute a map of hour strings to their minute values.

For example:

const hourMinutes = {};

hours.forEach(hour => {

const [h, m, s] = hour.split(':').map(Number);

hourMinutes[hour] = h * 60 + m;

});

Then, for each hour in the 'hours' array, we can look up its minute value.

Putting it all together:

On the frontend:

- When the user selects a date, fetch the existing time slots for that date.

- Convert existing time slots to merged intervals.

- Compute free intervals.

- For the start time dropdown, filter hours to those that are within any free interval.

- When a start time is selected, find the corresponding free interval.

- For the end time dropdown, filter hours to those that are after the start time and within the same free interval.

Now, let's consider some code examples.

First, the function to convert time string to minutes:

function timeToMinutes(timeStr) {

const [hours, minutes, seconds] = timeStr.split(':').map(Number);

return hours * 60 + minutes;

}

function minutesToTime(minutes) {

const hours = Math.floor(minutes / 60);

const mins = minutes % 60;

return `${String(hours).padStart(2, '0')}:${String(mins).padStart(2, '0')}:00`;

}

Then, processing the existing intervals:

// Assuming existingTimes is the array received from the backend

const existingIntervals = existingTimes.map(interval => ({

start: timeToMinutes(interval.start),

end: timeToMinutes(interval.end)

}));

// Sort and merge intervals

const merged = mergeIntervals(existingIntervals);

// Compute free intervals

const freeIntervals = computeFreeIntervals(merged);

// Function to merge intervals

function mergeIntervals(intervals) {

if (intervals.length === 0) return [];

intervals.sort((a, b) => a.start - b.start);

const merged = [intervals[0]];

for (let i = 1; i < intervals.length; i++) {

const last = merged[merged.length - 1];

if (intervals[i].start <= last.end) {

last.end = Math.max(last.end, intervals[i].end);

} else {

merged.push(intervals[i]);

}

}

return merged;

}

// Function to compute free intervals

function computeFreeIntervals(merged) {

const free = [];

let prevEnd = 0;

for (const interval of merged) {

if (interval.start > prevEnd) {

free.push({ start: prevEnd, end: interval.start });

}

prevEnd = Math.max(prevEnd, interval.end);

}

if (prevEnd < 1440) {

free.push({ start: prevEnd, end: 1440 });

}

return free;

}

Once the free intervals are computed, filter the start time dropdown:

const availableStartTimes = hours.filter(hour => {

const h = timeToMinutes(hour);

return freeIntervals.some(free => h >= free.start && h < free.end);

});

Similarly, for the end time dropdown when a start time is selected:

function getAvailableEndTimes(selectedStart) {

const startMin = timeToMinutes(selectedStart);

// Find the free interval that contains the start time

const free = freeIntervals.find(f => startMin >= f.start && startMin < f.end);

if (!free) return [];

// Filter hours that are after startMin and <= free.end

return hours.filter(hour => {

const h = timeToMinutes(hour);

return h > startMin && h <= free.end;

});

}

This way, the end time options are limited to hours after the start time and within the same free interval.

But need to ensure that the hour is converted correctly and that the end time is within the free interval.

But wait, the free interval's end is up to, for example, 540 (09:00:00). So if the start time is 480 (08:00:00), the end time can be 540 (09:00:00), which is allowed.

But when converting back from minutes to time, 540 minutes is 09:00:00.

So in the end time dropdown, for the example, the available options would be ["09:00:00"].

But wait, the free interval is [0, 540), so the end time must be < 540. But 540 is the end of the free interval, which is exclusive. So the end time can be 540 (09:00:00) only if the existing intervals start after that.

But according to our earlier assumption, the end time can be equal to the start of the next merged interval. So in this case, the end time of 540 is allowed.

Therefore, the end time can be up to and including the free interval's end.

Wait, in the free interval [0, 540), the end time must be <= 540.

But 540 is not included in the free interval (since it's exclusive). So if the end time is 540, it's actually the start of the merged interval.

But according to the non-overlap check, a module ending at 540 and a merged interval starting at 540 would not overlap.

Therefore, the end time can be equal to the free interval's end.

But when converting from minutes to time, the free interval's end is in minutes. So for example, free.end is 540, which is 09:00:00.

So when checking if h <= free.end, 540 is included.

But in the free interval's definition, free.start <= h < free.end. So 540 is not included in the free interval. However, the end time can be 540, which is the boundary.

This is a bit ambiguous, but based on the non-overlap condition, it's allowed.

Therefore, the code for getAvailableEndTimes should include hours where h > startMin and h <= free.end.

Thus, the end time can be up to the free.end.

This should handle all cases.

Now, putting it all together in the frontend code.

When the date changes:

- Fetch the timeslots for the date from '/timeslots' endpoint.

- Process the response into existingIntervals.

- Merge and compute freeIntervals.

- Update the available start times.

When the start time changes:

- Compute the available end times based on the selected start time and the freeIntervals.

Additionally, need to handle the case where no date is selected, but the user tries to select a start/end time. So the date is required.

Now, regarding the backend code, the user's current code has a couple of issues.

First, the SQL queries are separate for start and end times, which can be inefficient. Combining them into a single query would be better.

Also, the current code sends the times as an array containing two arrays: [startTimes, endTimes]. This structure may not pair the start and end times correctly, especially if there are multiple modules. For example, if there are two modules, the startTimes array would have two entries, and the endTimes array would have two entries, but the order may not be preserved if the two queries are not atomic. However, in practice, since the two queries are executed in sequence on the same date, and assuming no changes to the database between the two queries, the order should be the same. But this is not guaranteed and is a potential bug.

Therefore, the backend should return an array of objects, each with start and end times, ensuring that each pair is correct.

So modifying the backend code:

app.get('/timeslots', (req, res) => {

const date = req.query.date;

if (!date) {

return res.status(400).json({ error: 'Date is required' });

}

const query = 'SELECT module_start_time, module_end_time FROM modules WHERE module_date = ?';

db.query(query, [date], (err, results) => {

if (err) {

console.error(err);

return res.status(500).json({ error: 'Internal server error' });

}

const times = results.map(row => ({

start: row.module_start_time,

end: row.module_end_time

}));

res.json(times);

});

});

This way, the frontend receives an array of { start, end } objects, which is easier to process.

Finally, the frontend code should handle this data correctly.

In summary, the steps to solve the problem are:

1. Modify the backend to return paired start and end times.

2. On the frontend, fetch the existing intervals and process them into merged intervals.

3. Compute free intervals based on the merged intervals.

4. Filter the start time dropdown to include only hours within free intervals.

5. When a start time is selected, filter the end time dropdown to include hours after the start time within the same free interval.

Potential edge cases to consider:

- No existing modules for the date: all hours are available.

- Modules that cover the entire day: no hours are available.

- Modules with overlapping or adjacent times are merged correctly.

- Time zones: assuming that the server and client are using the same time zone, or times are stored in UTC and converted appropriately.

Additionally, the frontend should handle the case where the user hasn't selected a date yet, disabling the dropdowns or showing a message.

Another consideration is that the hours array is in 24-hour format, and the database times are stored as such. Ensure that the conversion between time strings and minutes is correct.

Testing this with various scenarios would be important. For example:

- Existing modules from 09:00 to 10:00 and 10:00 to 11:00 should be merged into 09:00-11:00. Free intervals would be before 09:00, between 11:00-24:00.

- A free slot from 08:00 to 09:00 allows start times 08:00 and end time 09:00.

- If the entire day is booked, no start times are available.

By implementing these steps, the dropdowns will be filtered to prevent overlapping modules.